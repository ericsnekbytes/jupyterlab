

Building Dual Compatibility Extensions with Lab 4 and Notebook
Building Dual Compatibility Jupyter Extensions
Building Lab 4 / Notebook 7 Dual Compatibility Jupyter Extensions






Building Lab 4 / Notebook 7 Compatible Jupyter Extensions

Jupyter Notebook 7 is built with components from JupyterLab, and since both use the same building blocks, that means your extension can work on both with little or no modification depending on its design.

This guide will give you an overview of compatibility features, then a tutorial and reference code covering some of the topics mentioned here. If you don't know how to make extensions, you can read more about the basics at YY [LINK].

How Compatibility Works

At a high level, extensions for JupyterLab and Jupyter Notebook both typically start from a template project. You can download and start modifying a template project with Cookiecutter [LINK]. Once your template is ready, you can start adding components and features to build your extension.

An extension for Lab (and for Notebook 7) is made up of a [LINK] series of bundled plugins [LINK], and those plugins typically use components from the interface toolkit Lumino [LINK] as well as the JupyterLab API [LINK] (among others) to help build your extension's look and behavior (both are written in Typescript).

This is how basic compatibility features work: both apps use the same building blocks and methods. For instance, both Lab and Notebook 7 accept Lumino widgets as interface components, both apps allow you to add them to the interface by specifying an "area" to place them into, and extensions for both use the same basic JupyterFrontendPlugin class.

"Do Nothing" Compatibility

This is the easiest way to achieve compatibility: If your extension only uses features that both Lab and Notebook 7 have, you can simply install it and it will seamlessly work in both Lab and Notebook 7.

An extension that adds a single self-contained icon widget to the top bar of the UI, for instance, doesn't need to do anything at all to be compatible with both Lab and Notebook 7 (both apps have a top area that can hold the widget, so it will be visible in both Lab and Notebook 7 upon install and after launch).

Not all extensions will be able to use "Do Nothing" compatibility: The "main" area in Lab is one example of a feature/UI area that is not supported by Notebook 7 where "Do Nothing" compatibility won't work.

Compatibility in Complex Extensions

Complex extensions can be adapted to work in both apps. The approach and effort needed to achieve compatibility depends on the design of your extension.

Some features only exist in Lab, or in Notebook 7, and in those cases you will have some extra work to do to ensure compatibility, or to disable features that are not available in one of the interfaces. On top of that, you can specialize or add behaviors that are specific only to Lab or only to Notebook 7.

With that in mind, here are some general tips for designing compatible extensions:

- Organize your code: Identify which features in your extension are Lab-only and which are Notebook 7-only, and try to separate those from the most important core widgets and classes (you should put this app-specific code in a different place than your main extension classes...if you include app-specific code inside your main classes and widgets, it will be much harder to achieve compatibility and pull those pieces out later)
- Consider making some features optional, and enable them only when the the app-specific features they need are available (more on this "optional-extras" approach later)
- Note that adding specialized app-specific extra behaviors and features (features that rely on capabilities that only exist in either Lab or Notebook 7) may require more complex compatibility architectures

Solutions

The "Do Nothing" Strategy

Extensions that only use features common to both Lab and Notebook 7 don't need any modifications to work in both apps. Users who install your extension will be able to seamlessly run it in either Lab or Notebook 7.

Keep in mind that some features for Lab are not available in Notebook 7:

- The "main" area in Lab does not exist in Notebook 7
- Notebook 7 does not have a status bar (CHECK THIS >>>>>>>>>>>)

See [LINK] this example of a compatible top-bar-icon-widget that works in both Lab and Notebook 7 out of the box.

The Multi-Plugin Strategy
Switching Behaviors with Multiple Plugins
Using Multiple Plugins to Enable App Specific Behaviors
Enabling Features by using Multiple Plugins

One way to selectively enable app-specific features is to export a list of plugins from your extension, then use the "requires" plugin property to request Lab-only or Notebook-7 only features (testing for ILabShell or INotebookShell is an easy way to check if your extension is running in Lab or Notebook). When your extension loads in Notebook 7, any Lab-only features will not load:

SAMPLE CODE/REPO LINK?

The example below adds a widget to the main area in Lab, but adds to a different area in Notebook 7 (since there's no main area in Notebook 7).

LINK/REPO


Extension behaviors can check for behaviors and switch 

use a modular multi-plugin approach to 

Extensions can export a list of plugins, where each plugin can independently request Lab-only or Notebook 7-only features (via their "requires" property).


require Lab and some require Notebook 7.

This method uses multiple plugins and a thin compatibility layer to switch between a Lab specific version of the extension and a Notebook 7 specific version of the extension.

REQUIRES, OPTIONAL, ARGS ORDER ETC

See [LINK] this example (at XX) for an example extension that either adds a widget to the "main" area in Lab


To switch between 

Extensions can export 

With this strategy, you ensure that yo

Here's an example of the 


Here's an example of "Do Nothing" 

[LINK TO JEREMYS VIDEO]



With the optional-extras approach, you identify which 



- optional extras
- thin compatibility layer (do this or do that if I'm in lab or nb)



- Organize your widgets and classes to keep important core features separate from Lab or Notebook 7 specific interface and feature code...this way, you can minimize the amount of code you need to adapt/update
...this may necessitate complex branching or restructuring of your code.

if you're writing a feature that 

if your extension has a feature that depends on Lab, 

- Identify which features are Lab-only and which are Notebook 7-only, and try to separate those from the most important core widgets and classes in your app

- Organize your widgets and classes so that common core functionality


Consider using an optional-extras design pattern. In this scheme, features that only work in either Lab or Notebook 7 can be disabled if they're not running in the appropriate app




Approaches

You can 


It is a good idea to design your

You can aim to provide a set of optional extra features specific to only Lab or only Notebook 7, for instance, and disable them when they're not available.

You can make a core and others blah blah.


You can design


If your extension has optional featguirte


Some extensions may want to enable features only available in Lab, for instance




- Build core funcitonality in one place, then do 



Some extensions may want to enable some optional features 

Some features only exist in Lab, or in Notebook 7, and in those cases you will have some extra work to do to ensure compatibility with both apps.




Adapting a complex extension for compatibility in both apps 


There's a wide range of compa


Compatibility with both Lab and Notebook 7 can be achieved in 






Some extensions may want to use Lab-only features in


Extensions that need to 



Some features only exist in Lab, or in Notebook 7, and in those cases you will have some extra work to do to ensure compatibility with both apps.



: Just install the extension and it will seamlessly work! For instance, an extension that adds an icon widget to the top bar will seamlessly work in both Lab and Notebook 7 once it's installed 

 (the "Main" area in Lab is an example of a feature/area that Notebook 7 does not support, so extensions using the main area in Lab will require some extra work to be compatible with both apps).

Some features only exist in Lab, or in Notebook 7, and in those cases you will have some extra work to do to ensure compatibility with both apps.

MAIN, TOP, RIGHT ETC note

More Complex Compatibility Approaches





The needs of your ext determine what kind of compatibility steps you will need to take to ensure it runs properly on both, sliding scale of complexity?

Need to know:
- Do I need to customize behaviors for lab and notebook? How much granularity?
- Am I adding items to the interface that exist in both Lab and Notebook? MAIN is not present in lab for instance
- 





The most basic extension compatibility features rely on that shared usage of components and methods: Both Lab and Notebook 7 accept Lumino widgets as interface components, and both apps allow you to add them to the interface by specifying an "area" of the interface, for instance. This means that simple extensions, such as one that adds a single self-contained widget to the UI, don't need to do anything 





Basic compatibility for simple extensions relies upon the shared
such as an extension with a single self-contained widget in the UI, works on the 
is dependent upon, works by,
depends upon, builds on,

you can just add your widget to an area and it will just work...sometimes

By using the 


For self contained extensions that

to do things like connect with Jupyter's interface, add buttons and icons to the Notebook interface, or add completely new features.




Extensions for Lab AND for Notebook are both made up of a series of bundled Plugins


 both use JupyterLab components


NEED DIAGRAMS and H*IGH LEVEL BASICS PAGES
-Anatomy of an extension
-High level tools overview...jlpm, conda/pip, typescript, blah blahb
-Use inkscape for this, add pages before release if possible
-cookiewcutter link, can be to JUP TOOLS paghe"?


obtained with the "Cookiecutter" tool.






+What nmeeds to go into th is doc?? how to structgure...?

-Do an example like Jeremy's...?
-Also explain where there are incompatibilities, use mtg's approach...export diff plugins to encapsulate differences (one requires ilabshell one requires inotebookshell etc)
-Need to explain prereq steps, separater them out so not overhwlemingb
-Make example repo with tutorial stuff
-Make sample code/template repo for dual compat with mtg's approach?? cookiecutter?






